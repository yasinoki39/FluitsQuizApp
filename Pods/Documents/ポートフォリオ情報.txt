採用の大前提　その人を雇って会社に利益かあるか
ポートフォリオの役割　技術的側面から価値を伝えるもの

★重要なこと　伸びしろがあるか
技術選択
今流行っているか、これから伸びそう
swift flutter

★リーダビリティ
エンジニアの目線に立てているか　コードがリファクタリングされてきれいな状態で読みやすいか
ドキュメントがちゃんと整備されているか
リファクタして読みやすい状態

★全体像の理解
開発の流れがわかっているか

★完成度
ある程度形になっているか
バグがないなど

★共通
GitHubの使い方
簡単なものを改善させるような
普及している技術
デプロイをしている




★いいこと！
・アプリケーションの用途を一発で理解する

・UI/UXが整っていて使い勝手が良いこと

・レスポンスが良好であること
Herokuなどを一時的に有料にする

・リアルなデモデータが登録されている
テスト01とかはダメ！

・機能が十分に多い、質より数で勝負

・不具合がない

・READMEが整理整頓されていて、使用している技術が把握できる

・コードの可読性が高く、最低限DRY原則が適用されている　綺麗に整形されている

・テストが十分に書かれている

・GitHubのIssueやプルスクを活用している

・レベル高めのAWS　Docker　CircleCI等が使われている




★ダメなこと！
・複数アカウントでろぐいんしないと使えない機能に工数を使ってしまうこと
例、リアルタイムチャットは✕
単にユーザー間でメッセージを送受信できるだけの機能にしておく

・ユーザー登録やSNSログイン系の機能に工数を使ってしまうこと
わざわざメールアドレス入力は面倒くさい！
シンプルなログイン機能や「かんたん」ログインでよし！
「ソーシャルシェア」系の機能はおすすめ！

・決済系の機能に工数をつかってしまう

・外部APIに頼りすぎてしまう
主機能を外部APIに依存させるのはよくない！！

・余計なランディングページを作ってしまう
ランディングページ→ユーザーが一番最初に見るページ
メディア系のサービスなら「投稿一覧画面」とかをトップにするべき
説明しなくても直感的に使い方がわかるUI/UXにすること

